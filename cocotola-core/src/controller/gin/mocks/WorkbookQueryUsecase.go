// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/redstart/user/domain"

	mock "github.com/stretchr/testify/mock"

	student "github.com/kujilabo/cocotola-1.21/cocotola-core/src/usecase/student"
)

// WorkbookQueryUsecase is an autogenerated mock type for the WorkbookQueryUsecase type
type WorkbookQueryUsecase struct {
	mock.Mock
}

type WorkbookQueryUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkbookQueryUsecase) EXPECT() *WorkbookQueryUsecase_Expecter {
	return &WorkbookQueryUsecase_Expecter{mock: &_m.Mock}
}

// FindWorkbooks provides a mock function with given fields: ctx, organizationID, operatorID, param
func (_m *WorkbookQueryUsecase) FindWorkbooks(ctx context.Context, organizationID *domain.OrganizationID, operatorID *domain.AppUserID, param *student.WorkbookFindParameter) (*student.WorkbookFindResult, error) {
	ret := _m.Called(ctx, organizationID, operatorID, param)

	var r0 *student.WorkbookFindResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, *student.WorkbookFindParameter) (*student.WorkbookFindResult, error)); ok {
		return rf(ctx, organizationID, operatorID, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, *student.WorkbookFindParameter) *student.WorkbookFindResult); ok {
		r0 = rf(ctx, organizationID, operatorID, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*student.WorkbookFindResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, *student.WorkbookFindParameter) error); ok {
		r1 = rf(ctx, organizationID, operatorID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkbookQueryUsecase_FindWorkbooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindWorkbooks'
type WorkbookQueryUsecase_FindWorkbooks_Call struct {
	*mock.Call
}

// FindWorkbooks is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID *domain.OrganizationID
//   - operatorID *domain.AppUserID
//   - param *student.WorkbookFindParameter
func (_e *WorkbookQueryUsecase_Expecter) FindWorkbooks(ctx interface{}, organizationID interface{}, operatorID interface{}, param interface{}) *WorkbookQueryUsecase_FindWorkbooks_Call {
	return &WorkbookQueryUsecase_FindWorkbooks_Call{Call: _e.mock.On("FindWorkbooks", ctx, organizationID, operatorID, param)}
}

func (_c *WorkbookQueryUsecase_FindWorkbooks_Call) Run(run func(ctx context.Context, organizationID *domain.OrganizationID, operatorID *domain.AppUserID, param *student.WorkbookFindParameter)) *WorkbookQueryUsecase_FindWorkbooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.OrganizationID), args[2].(*domain.AppUserID), args[3].(*student.WorkbookFindParameter))
	})
	return _c
}

func (_c *WorkbookQueryUsecase_FindWorkbooks_Call) Return(_a0 *student.WorkbookFindResult, _a1 error) *WorkbookQueryUsecase_FindWorkbooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkbookQueryUsecase_FindWorkbooks_Call) RunAndReturn(run func(context.Context, *domain.OrganizationID, *domain.AppUserID, *student.WorkbookFindParameter) (*student.WorkbookFindResult, error)) *WorkbookQueryUsecase_FindWorkbooks_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveWorkbookByID provides a mock function with given fields: ctx, organizationID, operatorID, workbookID
func (_m *WorkbookQueryUsecase) RetrieveWorkbookByID(ctx context.Context, organizationID *domain.OrganizationID, operatorID *domain.AppUserID, workbookID int) (*student.WorkbookRetrieveModel, error) {
	ret := _m.Called(ctx, organizationID, operatorID, workbookID)

	var r0 *student.WorkbookRetrieveModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, int) (*student.WorkbookRetrieveModel, error)); ok {
		return rf(ctx, organizationID, operatorID, workbookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, int) *student.WorkbookRetrieveModel); ok {
		r0 = rf(ctx, organizationID, operatorID, workbookID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*student.WorkbookRetrieveModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, int) error); ok {
		r1 = rf(ctx, organizationID, operatorID, workbookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkbookQueryUsecase_RetrieveWorkbookByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveWorkbookByID'
type WorkbookQueryUsecase_RetrieveWorkbookByID_Call struct {
	*mock.Call
}

// RetrieveWorkbookByID is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID *domain.OrganizationID
//   - operatorID *domain.AppUserID
//   - workbookID int
func (_e *WorkbookQueryUsecase_Expecter) RetrieveWorkbookByID(ctx interface{}, organizationID interface{}, operatorID interface{}, workbookID interface{}) *WorkbookQueryUsecase_RetrieveWorkbookByID_Call {
	return &WorkbookQueryUsecase_RetrieveWorkbookByID_Call{Call: _e.mock.On("RetrieveWorkbookByID", ctx, organizationID, operatorID, workbookID)}
}

func (_c *WorkbookQueryUsecase_RetrieveWorkbookByID_Call) Run(run func(ctx context.Context, organizationID *domain.OrganizationID, operatorID *domain.AppUserID, workbookID int)) *WorkbookQueryUsecase_RetrieveWorkbookByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.OrganizationID), args[2].(*domain.AppUserID), args[3].(int))
	})
	return _c
}

func (_c *WorkbookQueryUsecase_RetrieveWorkbookByID_Call) Return(_a0 *student.WorkbookRetrieveModel, _a1 error) *WorkbookQueryUsecase_RetrieveWorkbookByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkbookQueryUsecase_RetrieveWorkbookByID_Call) RunAndReturn(run func(context.Context, *domain.OrganizationID, *domain.AppUserID, int) (*student.WorkbookRetrieveModel, error)) *WorkbookQueryUsecase_RetrieveWorkbookByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkbookQueryUsecase creates a new instance of WorkbookQueryUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkbookQueryUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkbookQueryUsecase {
	mock := &WorkbookQueryUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
