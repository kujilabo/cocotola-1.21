// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/redstart/user/domain"

	mock "github.com/stretchr/testify/mock"

	srcdomain "github.com/kujilabo/cocotola-1.21/cocotola-core/src/domain"

	workbookadddomain "github.com/kujilabo/cocotola-1.21/cocotola-core/src/domain/workbookadd"
)

// WorkbookCommandUsecase is an autogenerated mock type for the WorkbookCommandUsecase type
type WorkbookCommandUsecase struct {
	mock.Mock
}

type WorkbookCommandUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *WorkbookCommandUsecase) EXPECT() *WorkbookCommandUsecase_Expecter {
	return &WorkbookCommandUsecase_Expecter{mock: &_m.Mock}
}

// AddWorkbook provides a mock function with given fields: ctx, organizationID, operatorID, param
func (_m *WorkbookCommandUsecase) AddWorkbook(ctx context.Context, organizationID *domain.OrganizationID, operatorID *domain.AppUserID, param *workbookadddomain.Parameter) (*srcdomain.WorkbookID, error) {
	ret := _m.Called(ctx, organizationID, operatorID, param)

	var r0 *srcdomain.WorkbookID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, *workbookadddomain.Parameter) (*srcdomain.WorkbookID, error)); ok {
		return rf(ctx, organizationID, operatorID, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, *workbookadddomain.Parameter) *srcdomain.WorkbookID); ok {
		r0 = rf(ctx, organizationID, operatorID, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*srcdomain.WorkbookID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.OrganizationID, *domain.AppUserID, *workbookadddomain.Parameter) error); ok {
		r1 = rf(ctx, organizationID, operatorID, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkbookCommandUsecase_AddWorkbook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddWorkbook'
type WorkbookCommandUsecase_AddWorkbook_Call struct {
	*mock.Call
}

// AddWorkbook is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID *domain.OrganizationID
//   - operatorID *domain.AppUserID
//   - param *workbookadddomain.Parameter
func (_e *WorkbookCommandUsecase_Expecter) AddWorkbook(ctx interface{}, organizationID interface{}, operatorID interface{}, param interface{}) *WorkbookCommandUsecase_AddWorkbook_Call {
	return &WorkbookCommandUsecase_AddWorkbook_Call{Call: _e.mock.On("AddWorkbook", ctx, organizationID, operatorID, param)}
}

func (_c *WorkbookCommandUsecase_AddWorkbook_Call) Run(run func(ctx context.Context, organizationID *domain.OrganizationID, operatorID *domain.AppUserID, param *workbookadddomain.Parameter)) *WorkbookCommandUsecase_AddWorkbook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.OrganizationID), args[2].(*domain.AppUserID), args[3].(*workbookadddomain.Parameter))
	})
	return _c
}

func (_c *WorkbookCommandUsecase_AddWorkbook_Call) Return(_a0 *srcdomain.WorkbookID, _a1 error) *WorkbookCommandUsecase_AddWorkbook_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WorkbookCommandUsecase_AddWorkbook_Call) RunAndReturn(run func(context.Context, *domain.OrganizationID, *domain.AppUserID, *workbookadddomain.Parameter) (*srcdomain.WorkbookID, error)) *WorkbookCommandUsecase_AddWorkbook_Call {
	_c.Call.Return(run)
	return _c
}

// NewWorkbookCommandUsecase creates a new instance of WorkbookCommandUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWorkbookCommandUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *WorkbookCommandUsecase {
	mock := &WorkbookCommandUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
